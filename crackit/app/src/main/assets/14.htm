 <!DOCTYPE html>
<html lang="en">
<head>
	<title>MISCELLANEOUS</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1">
	<!--bootstrap-->
	<link href="css/bootstrap.min.css" rel="stylesheet" type="text/css">
	<!--custom css-->
	<link href="css/style.css" rel="stylesheet" type="text/css" />
	<!--component-css-->
</head>
<body>
<div class="body-back"> <div class="second">Ques. : What is Lambda Expressions ?<br>
Ans :	A lambda expression is an anonymous method that allows you to write a method in the same place you are going to use it. It’s a method without a signature i.e no access-modifier , return type or name.<br>
It can be written as a replacement for anonymous class with simple implementation but confusing syntax.<br>

    <table><tr><td>Listnumbers = new List{11,37,52};<br>
ListoddNumbers = numbers.where(n => n % 2 == 1).ToList();<br>
//Now oddNumbers is equal to 11 and 37</td></tr></table>
<br>
Here the expression n => n % 2 == 1 simply means “n is the input parameter for the anonymous method which will returns true if the input is odd".

<div class="clearfix"></div>
                    </div><div class="first">Ques. : What is Java Enum Types ?<br>
Ans :	Enum in java is a data type that contains fixed set of constants.<br>
1. The enum declaration defines a class (called an enum type). The enum class body can include methods and other fields. The compiler automatically adds some special methods when it creates an enum. For example, they have a static values() method that returns an array containing all of the values of the enum in the order they are declared. This method is commonly used in combination with the for-each construct to iterate over the values of an enum type.<br>
        <table><tr><td>class EnumDemo<br>
{  <br>
public enum Day { MON , TUES , WED , THU , FRI , SAT , SUN }  <br>
  <br>
public static void main(String[] args)<br>
{  <br>
for (Day D : Day.values())<br>  
                   System.out.println(D); <br> 
}<br>
}<br>
// Output :   MON , TUES , WED , THU , FRI , SAT , SUN <br>
</td></tr></table>
2. When an enum is declared , The java compiler internally creates a static and final class that extends the Enum class.
The generated class automatically provides implementation of values() and valueOf() method that can be invoked on enum type.
Internal code generated by the compiler for the example above will be :<br>
        <table><tr><td>public static final class EnumDemo$Day extends Enum<br>
{  <br>
     public static final EnumDemo$DayMON ;<br>
public static final EnumDemo$DayTUES ;<br>
public static final EnumDemo$DayWED ;<br>
public static final EnumDemo$DayTHU ;<br>
public static final EnumDemo$DayFRI ;<br>
public static final EnumDemo$DaySAT ;<br>
public static final EnumDemo$DaySUN ;<br>
// private constructor to initialize default values for enum elements.<br>
     private EnumDemo$Day(String S , int i)<br>
     {<br>
         super(s,i) ;     // Calling Constructor of Enum Class<br>
     }<br>
// initializing default values for enum elements under static block<br>
     static<br>
     {<br>
         MON  = new EnumDemo$Day(“MON” , 0) ;<br>
         TUES = new EnumDemo$Day(“TUES” , 1) ;<br>
WED = new EnumDemo$Day(“WED” , 2) ;<br>
THU  = new EnumDemo$Day(“THU” , 3) ;<br>
  FRI  = new EnumDemo$Day(“FRI” , 4) ;<br>
  SAT = new EnumDemo$Day(“SAT” , 5) ;<br>
  SUN = new EnumDemo$Day(“SUN” , 6) ;<br>
     }<br>
    /* creating a method values() that returns an array containing all the 
        values of enum in order they are declared */<br>
     public static EnumDemo$Day[] values()<br>
{<br>
        return (EnumDemo$Day[])$VALUES.clone() ;<br>
}<br>
/* creating a method values() that returns an enum type constant value
corresponding to specified string in the argument i.e String S. */<br>
public static EnumDemo$Day[] valueOf(String S)<br>
{<br>
        return (EnumDemo$Day)   Enum.valueOf(EnumDemo$Day , S) ;<br>
}                                    // Calling valueOf() method of Enum Class<br>
}</td></tr></table>

<br>
3. The elements of enum are implicitly static and final. By default there initial value that starts from 0, 1, 2, 3 and so on. But we can initialize the specific value to the enum constants by defining fields and constructors inside enum block.<br>
            <table><tr><td>    class EnumDemo<br>
{  <br>
public enum Day { MON(100) , TUES(105) , WED(110) , THU(115) ,<br>
FRI(120) , SAT(125) , SUN(130) }  <br>
// providing constructor for above initialization of enum values<br>
private int Value ;<br>
private Day(int value)<br>
{<br>
   this.Value = value<br>
}<br>
// main method<br>
public static void main(String[] args)<br>
{  <br>
for (Day D : Day.values())  <br>
                   System.out.println(D.Value);<br>  
}<br>
}<br>
// Output :   100 , 105 , 110 , 115 , 120 , 125 , 130<br> 
</td></tr></table>

4. Enum can be defined outside or inside the class. The scope-definition for enum is same as that of a class.<br>
5. We can pass enum to a switch statement.<br>
            <table><tr><td>class EnumDemo<br>
{  <br>
public enum Day { MON , TUES , WED , THU , FRI , SAT , SUN } <br> 
  <br>
public static void main(String[] args)<br>
{  <br>
      Day ToDay = Day.TUES ;<br>
      Switch(ToDay)<br>
      {<br>
case MON :  System.out.println(“Today is Monday”);<br>  
case TUES :  System.out.println(“Today is Tuesday”);  <br>
case WED :  System.out.println(“Today is Wednesday”);  <br>
case THU :  System.out.println(“Today is Thursday”);  <br>
case FRI :  System.out.println(“Today is Friday”);  <br>
case SAT :  System.out.println(“Today is Saturday”);  <br>
case SUN :  System.out.println(“Today is Sunday”);  <br>
default      :  System.out.println(“Some Other Day”);  <br>
       }<br>
 } }</td></tr></table>



<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What are the advantages ofJava enum over a public static class with private constructor?<br>
Ans :	If you want to create a class that has only static and final fields and you want only a singleton instance of it to be created , then enum is the shortcut for that. Along with this it provides.<br>
* Additional methods to lookup its elements i.e value() , valueOf().<br>
* We can use enum values inside switch statement without qualification.<br>
* Guaranteed Singleton.

<div class="clearfix"></div>
                    </div><div class="first">Ques. : Can Enum implements interface in java ?<br>
Ans :	YES , Since enum declaration allows to define methods inside its declaration block , we can implement an interface.

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : Can enum extends a class?<br>
Ans :	NO , All the enum-type already extends abstract base class java.lang.Enum , they cannot extend another class as java doesn’t allow multiple inheritence.

<div class="clearfix"></div>
                    </div><div class="first">Ques. : Can we override toString() for enums?<br>
Ans :	YES offcourse , Like all other classes , enum also extends java.lang.Object and has toString() method available which can be overridden for better understandability.

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What is advantage and disadvantage of using Enum as Singleton?<br>
Ans :	Enum provides you a quick shortcut to implement Singleton design pattern, along with that enum also looks very promising with Serialization safety , synchronization i.e thread safety thus it’s extremely easy to create thread-safe Singleton using Enum. You don’t need to worry about double checked locking and volatile variable anymore.

<div class="clearfix"></div>
                    </div><div class="first">Ques. : Can we use Enum with TreeSet or TreeMap ?<br>
Ans :	YES, Since Enum implements Comparable interface and provides comparing logic for its elements. TreeSet or TreeMap would have no difficulty carrying them whether it is avoiding duplicacy in TreeSet or maintaining order in TreeMap.

<div class="clearfix"></div>   
                  </div><div class="second">Ques. :  If I try to add Enum constants to a TreeSet, What sorting order will it use ?<br>
Ans:		Tree Set will sort the Values in the order in which Enum constants are declared.

<div class="clearfix"></div>
                    </div><div class="first">Ques. : Can we override compareTo() for Enumeration ?<br>
Ans :	No. compareTo method is declared final for the Enumerations and hence cannot be overriden. This has been intentionally done so that one cannot temper with the sorting order on the Enumeration which is the order in which Enum constants are declared.

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : Can we pass Enum types as method arguments ?<br>
Ans :	No , Since each enum constant can have its own behaviour, thus treating Enum class as an interface type, one can implement polymorphic behaviour. However, enum instances can't be treated as class types. This is because each enum constant is a static final instance.


<div class="clearfix"></div>
                    </div></div>
          </body>
         </html>