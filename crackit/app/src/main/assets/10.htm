 <!DOCTYPE html>
<html lang="en">
<head>  
	<title>EXCEPTION HANDLING</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1">
	<!--bootstrap-->
	<link href="css/bootstrap.min.css" rel="stylesheet" type="text/css">
	<!--custom css-->
	<link href="css/style.css" rel="stylesheet" type="text/css" />
	<!--component-css-->
</head>
<body>
<div class="body-back"> <div class="second">Ques. : What is exception ?<br>
Ans :	Exception is an abnormal condition. In java, exception is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime.

<div class="clearfix"></div>
                    </div><div class="first">Ques. :What is exception handling ? What are its Advantage ?<br>
Ans :	Exception Handling is a mechanism to handle runtime errors such as ClassNotFound, IO, SQL, Remote etc.<br>
The core advantage of exception handling is to maintain the normal flow of the application. Exception normally disrupts the normal flow of the application that is why we use exception handling. <br>
Suppose there is 10 statements in your program and there occurs an exception at statement 5, rest of the code will not be executed i.e. statement 6 to 10 will not run. If we perform exception handling, rest of the exception will be executed. That is why we use exception handling in java.

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What are the different types of Exceptions ?<br>
Ans :	There are mainly two types of exceptions: checked and unchecked where error is considered as unchecked exception. The sun microsystem says there are three types of exceptions: <br>
1. Checked Exception<br>
2. Unchecked Exception<br>
3. Error

<div class="clearfix"></div>
                    </div><div class="first">Ques. : What is the difference between checked and unchecked exceptions ?<br>
Ans :
Checked Exception : The classes that extend Throwable class except RuntimeException and Error are known as checked exceptions e.g.IOException, SQLException etc. Checked exceptions are checked at compile-time.<br>
Unchecked Exception : The classes that extend RuntimeException are known as unchecked exceptions. E.g ArithmeticException,NullPointerException , ArrayIndexOutOfBoundsException etc.<br>
Unchecked exceptions are not checked at compile-time rather they are checked at runtime. <br>
Error : Error is irrecoverable e.g. OutOfMemoryError, VirtualMachineError, AssertionError etc.

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What is the Hierarchy of Java Exception classes ?<br>
Ans :<br>	
<img src="images/image008.jpg" alt="java" width="180" height="180"/>

<div class="clearfix"></div>
                    </div><div class="first">Ques. : What are common scenarios where exceptions may occur ?<br>
Ans :	There are given some scenarios where unchecked exceptions can occur. They are as follows:<br>
1) Scenario where ArithmeticException occurs<br>
If we divide any number by zero, there occurs an ArithmeticException.<br>
int a=50 / 0;//ArithmeticException<br><br>
2) Scenario where NullPointerException occurs<br>
If we have null value in any variable, performing any operation by the variable occurs aNullPointerException.<br> 
String s=null;  <br>
System.out.println(s.length());//NullPointerException<br><br>  
3) Scenario where NumberFormatException occurs<br>
The wrong formatting of any value, may occur NumberFormatException. Suppose I have a string variable that have characters, converting this variable into digit will occur NumberFormatException.<br> 
String s="abc";  <br>
int I =Integer.parseInt(s);//NumberFormatException<br><br>  
4) Scenario where ArrayIndexOutOfBoundsException occurs<br>
If you are inserting any value in the wrong index, it would result ArrayIndexOutOfBoundsException.<br>
int a[]=new int[5];  <br>
a[10]=50; //ArrayIndexOutOfBoundsException<br>  

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What are different Java Exception Handling Keywords ?<br>
Ans :	There are 5 keywords used in java exception handling.<br>
      1.try<br>	2.catch<br>	3.finally<br>	4.throw<br>	5.throws<br>

<div class="clearfix"></div>
                    </div><div class="first">Ques. : What is the internal mechanism of try-catch block ?<br>
Ans :	Java try block is used to enclose the code that might throw an exception. It must be used within the method. It must be followed by either catch or finally block.<br>
Java catch block is used to handle the Exception. It must be used after the try block only. You can use multiple catch block with a single try.
Internal working of java try-catch block<br>
    <img src="images/image009.jpg" alt="java" width="180" height="180"/><br>
The JVM firstly checks whether the exception is handled or not. If exception is not handled, JVM provides a default exception handler that performs the following tasks:<br>
* Prints out exception description.<br>
* Prints the stack trace (Hierarchy of methods where the exception occurred).<br>
* Causes the program to terminate.<br>
But if exception is handled by the application programmer, normal flow of the application is maintained i.e. rest of the code is executed.<br><br>
    <table><tr><td>public class Testtrycatch2<br>
{  <br>
public static void main(String args[])
{  <br>
   try{<br>  
      int data=50/0;<br>  
   }catch(ArithmeticException e){<br>
    System.out.println(e);<br>
    }<br>  
   
System.out.println("rest of the code...");<br>  
}  <br>
} <br>
Output : Exception in thread main java.lang.ArithmeticException:/ by zero<br>
rest of the code...<br>
public class Testtrycatch1{<br>  
public static void main(String args[]){<br>  
     int data=50/0 ;  <br>
      System.out.println("rest code");<br>  
}  <br>
                                        }<br>
    
Output : Exception in thread main java.lang.ArithmeticException:/ by zero
</td></tr></table>
<div class="clearfix"></div>   
                  </div><div class="second">Ques. : When do we use multiple catch blocks with try ?<br>
Ans :	When we have to perform different tasks at the occurrence of different Exceptions, we use java multi catch block.<br>
E.g :Say task1 on occurring of ArithmeticException , task 2 on occurring of ArrayOutOfBoundException , and a common task on occurring of any other exception other than mentioned.<br>
    
    
    <table><tr><td>public class Sample<br>
{<br>
public static void main(String args[])<br>
{  <br>
   try{<br>  
    int a[]=new int[5];<br>  
    a[5]=30/0;  // Arithmetic & ArrayOutofBounds Exception<br>
   }  <br>
   catch(ArithmeticException e){<br>
System.out.println("task1 is completed");<br>
}  <br>
   catch(ArrayIndexOutOfBoundsException e){<br>
System.out.println("task 2 completed");<br>
}  <br>
   catch(Exception e){<br>
System.out.println("common task completed");<br>
}  <br>
  
   System.out.println("rest of the code...");<br>  
 }  <br>
}  <br>
Output : task1 completed<br>
rest of the code..<br>
</td></tr></table>    
    <br>

    
NOTE: At a time only one Exception is occurred and at a time only one catch block is executed.<br>
All catch blocks must be ordered from most specific to most general i.e. catch for ArithmeticException must come before catch for Exception. Else a compile error may generate.

<div class="clearfix"></div>
                    </div><div class="first">Ques. : Can we have an empty catch block?<br>
Ans :	We can have an empty catch block but it’s the example of worst programming. We should never have empty catch block because if the exception is caught by that block, we will have no information about the exception and it will be a nightmare to debug it. There should be at least a logging statement to log the exception details in console or log files. 

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : When do we use Nested try blocks ?<br>
Ans :	Sometimes a situation may arise where a part of a block may cause one error and the entire block itself may cause another error. In such cases, exception handlers have to be nested.<br>
    <table><tr><td>class Sample {  <br>
 public static void main(String args[]){  <br>
  try{  <br>
    try{  <br>
     System.out.println("going to divide"); <br> 
     int b =39/0;  <br>
    }catch(ArithmeticException e)<br>{<br>System.out.println(e);<br>}<br>  
   
    try{  <br>
    int a[]=new int[5];<br>  
    a[5]=4;  <br>
    }<br>catch(ArrayIndexOutOfBoundsException e){<br>
System.out.println(e);}  <br>
     
    System.out.println("other statement);<br>  
  }<br>catch(Exception e)<br>{<br>
System.out.println("handled");} <br> 
  
  System.out.println("normal flow..");<br>  
 }  <br>
}  
</td></tr></table>
<div class="clearfix"></div>
                    </div><div class="first">Ques. : What if there is a break or return statement in try block followed by finally block ? <br>
Ans :	If there is a return statement in the try block, the finally block executes right after the return statement encountered, and before the return executes.

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : Why do we use finally block with try statements ?<br>
Ans :	Java finally block is a block that is used to execute important code such as closing connection, stream etc.<br>
* Java finally block is always executed whether exception is handled or not.<br>
* Java finally block must be followed by try or catch block.<br>
Let's see the different cases where java finally block can be used.<br>
Case 1 : where exception doesn't occur.<br>
    <table><tr><td>class Sample {  <br>
  public static void main(String args[]<br>
{  <br>
  try{  <br>
   int data=25/5;<br>  
   System.out.println(data);<br>  
  }  <br>
  catch(NullPointerException e)<br>{<br>System.out.println(e);<br>}<br>  
  finally{<br>
System.out.println("finally block is always executed");<br>
}  <br>
  
System.out.println("rest of the code...");  <br>
  }  <br>
}  <br>
Output:5<br>
finally block is always executed<br>
rest of the code...<br><br>
</td></tr></table>
Case 2 : where exception occurs and not handled.<br>

    <table><tr><td>class Sample {  <br>
  public static void main(String args[])<br>
{  <br>
  try{ <br> 
   int data=25/ 0 ;  //ArithmeticException thrown<br>
   System.out.println(data);  <br>
  }  <br>
  catch(NullPointerException e)<br>{<br>System.out.println(e);<br>}<br>  
  finally{<br>
System.out.println("finally block is always executed");<br>
}  <br>
  
System.out.println("rest of the code..."); <br> 
  }  <br>
}  <br><br>
Output:finally block is always executed<br>
Exception in thread main java.lang.ArithmeticException:/ by zero<br><br>
</td></tr></table>
    
    Case 3 : where exception occurs and handled.<br>

    <table><tr><td>class Sample {  <br>
  public static void main(String args[])<br>
{<br>  
  try{ <br> 
   int data=25/ 0 ;  //ArithmeticException thrown<br>
   System.out.println(data);  <br>
  }  <br>
  catch(ArithmeticException e){<br>System.out.println(e);<br>}<br>  
  finally{<br>
System.out.println("finally block is always executed");<br>
}  <br>
  
System.out.println("rest of the code...");  <br>
  }  <br>
}  <br><br>
Output:Exception in thread main java.lang.ArithmeticException:/ by zero<br>
finally block is always executed<br>
rest of the code...</td></tr></table>
    
    
    
    <br>
NOTE:For each try block there can be zero or more catch blocks, but only one finally block. <br>
The finally block will not be executed if program exits(either by calling System.exit() or by causing a fatal error that causes the process to abort). 

<div class="clearfix"></div>
                    </div><div class="first">Ques. : What is the use of Java throw Keyword ?<br>
Ans :	The Java throw keyword is used to explicitly throw an exception. We can throw either checked or unchecked exception in java by throw keyword. The throw keyword is mainly used to throw custom exception.<br>
    <table><tr><td>public class TestThrow1{ <br> 
     static void validate(int age){<br>  
       if(age<18)  <br>
        throw new ArithmeticException("not eligible to vote");<br>  
       else  <br>
        System.out.println("welcome to vote");<br>  
     }<br>
     public static void main(String args[]){  <br>
        validate(13);  <br>
        System.out.println("rest of the code...");<br>  
   }  <br>
}<br>
Output :<br>
Exception in thread main java.lang.ArithmeticException:not eligible to vote
</td></tr></table>
<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What is Exception Propagation ?<br>
Ans :	An exception is first thrown from the top of the stack and if it is not caught, it drops down the call stack to the previous method, If not caught there, the exception again drops down to the previous method, and so on until they are caught or until they reach the very bottom of the call stack. This is called exception propagation.<br><br>

    <table><tr><td>class Sample<br>
{  <br>
void m(){ <br> 
    int data=50/0; // exception occurs in m()<br>
  }  <br>
 void n(){<br>  
    m();  //n() calling m()<br>
  }  <br>
void p(){<br>  
   try{  <br>
    n();  //p() calling n()<br>
   }<br>catch(Exception e){<br>//exception handling in p()<br>
System.out.println("exception handled");<br>}<br>  
  }  <br>
 
public static void main(String args[])<br>
{ <br>
       Sample obj=new Sample();<br>  
   obj.p();  //main calling p()<br>
   System.out.println("normal flow..."); <br> 
  }  <br>
}  <br>
<br>Output:exception handled<br>
normal flow...</td></tr></table>
    
    <br>
In the above example exception occurs in m() method where it is not handled,so it is propagated to previous n() method where it is not handled, again it is propagated to p() method where exception is handled.<br> 
Exception can be handled in any method in call stack either in main() method,p() method() method or m() method.<br>
NOTE : Checked exceptions do not propagate by default. We have to use throws keyword for that.

<div class="clearfix"></div>
                    </div><div class="first">Ques. : What is the use of throws keyword in java ?<br>
Ans :	The Java throws keyword is used to declare an exception (checked exception). It gives an information to the programmer that there may occur an exception so it is better for the programmer to provide the exception handling code so that normal flow can be maintained.
Exception Handling is mainly used to handle the checked exceptions. If there occurs any unchecked exception such as NullPointerException, it is programmers fault that he is not performing check up before the code being used.<br>
Advantage of Java throws keyword<br>
* Now Checked Exception can be propagated (forwarded in call stack).<br>
* It provides information to the caller of the method about the exception.<br>
Let's see the example of java throws clause which describes that checked exceptions can be propagated by throws keyword.<br>

    <table><tr><td>import java.io.IOException;<br>  
class Sample<br>
{  <br>
   void m()throws IOException{<br>  
      throw new IOException("device error");<br>
        //checked exception <br> 
    }  <br>
   void n()throws IOException{ <br> 
      m();  // n() calling m()<br>
    }  <br>
 void p(){ <br> 
     try{  <br>
      n();  // p() calling n()<br>
     }catch(Exception e){<br>
        //exception handling in p()<br>
System.out.println("exception handled");}  <br>
    }<br>
  
   public static void main(String args[])<br>
{  <br>
     Sample obj=new Sample();<br>  
     obj.p();  // main() calling p()<br>
     System.out.println("normal flow…");<br>  
    }<br>
}<br>
Output :exception handled<br>
normal flow…</td></tr></table>
    
    
    
    <br>
If you are calling a method that declares an exception, you must either caught or declare the exception.

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What happens if you declare an exception using throws & upon throwing you don’t handle the exception ?<br>
Ans :	There are three cases possible when declare an exception using throws keyword.<br>
Case 1 :You declare an exception , and provide a handler for that exception : In such cases it doesn’t matter whether program throws an exception or not , the program flow will be normal.<br>
Case 2 : You declare an exception , doesn’t provide any handler , and exception also doesn’t occur : In such cases also program flow will be normal.<br>
Case 3 : You declare an exception , doesn’t provide any handler , and exception occurs : The program flow will get interrupted and a RuntimeException gets occurred.

<div class="clearfix"></div>
                    </div><div class="first">Ques. : What does 'Ducking' the exception mean ?<br>
Ans :	If a method does not handle the exception but simply declares it using throws , the method is said to be ducking the exception.

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What are the Differences between throw and throws ?<br>
Ans :	There are many differences between throw and throws keywords. A list of differences between throw and throws are given below<br>

    <table><tr><th>throw</th><th>throws</th></tr>
        <tr><td>Java throw keyword is used to explicitly throw an exception.</td><td>Java throws keyword is used to declare an exception.</td></tr>
        <tr><td>Checked exception cannot be propagated using throw only.</td><td>Checked exception can be propagated with throws.</td></tr>
        <tr><td>Throw is followed by an instance.</td><td>Throws is followed by class.</td></tr>
        <tr><td>Throw is used within the method.</td><td>Throws is used with method signature.</td></tr>
        <tr><td>You cannot throw multiple exceptions.</td><td>You can declare multiple exceptions</td></tr>
        
    
    </table>

<div class="clearfix"></div>
                    </div><div class="first">Ques. : Can we rethrow an exception ?<br>
Ans :	Yes, by throwing same exception in catch block.

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What happens when exception is thrown by main method ?<br>
Ans :	When exception is thrown by main() method, Java Runtime terminates the program and print the exception message and stack trace in system console. 

<div class="clearfix"></div>
                    </div><div class="first">Ques. : Differentiate between final, finally and finalize ?<br>
Ans :	There are many differences between final, finally and finalize. A list of differences between final, finally and finalize are given below:<br>

    <table>
        <tr><th>final</th><th>finally</th><th>finalize</th></tr>
        <tr><td>Final is used to apply restrictions on class, method and variable. Final class can't be inherited, final method can't be overridden and final variable value can't be changed.</td><td>Finally is used to place important code, it will be executed whether exception is handled or not.</td><td>Finalize is used to perform clean up processing just before object is garbage collected.</td></tr>
        <tr><td>Final is a keyword.</td><td>Finally is a block.</td><td>Finalize is a method.</td></tr>

    </table>

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What is StackOverflowError?<br>
Ans:		The StackOverFlowError is an Error Object thrown by the Runtime System when it Encounters that your application/code has ran out of the memory. It may occur in case of recursive methods or a large amount of data is fetched from the server and stored in some object. This error is generated by JVM.

<div class="clearfix"></div>
                    </div><div class="first">Ques. : What is difference b/w ClassNotFoundException and NoClassDefFoundError?<br>
Ans:		A ClassNotFoundException is thrown when the reported class is not found by the ClassLoader in the CLASSPATH. It could also mean that the class in question is trying to be loaded from another class which was loaded in a parent classloader and hence the class from the child classloader is not visible.<br>
Consider if NoClassDefFoundError occurs which is something like
java.lang.NoClassDefFoundError<br>
src/com/TestClass <br>
does not mean that the TestClass class is not in the CLASSPATH. It means that the class TestClass was found by the ClassLoader however when trying to load the class, it ran into an error reading the class definition. This typically happens when the class in question has static blocks or members which use a Class that's not found by the ClassLoader. So to find the culprit, view the source of the class in question (TestClass in this case) and look for code using static blocks or static members. 

<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What are different scenarios causing “Exception in thread main”?<br>
Ans :	Some of the common main thread exception scenarios are:<br>
* Exception in thread main java.lang.UnsupportedClassVersionError: This exception comes when your java class is compiled from another JDK version and you are trying to run it from another java version.<br>
* Exception in thread main java.lang.NoClassDefFoundError: There are two variants of this exception. The first one is where you provide the class full name with .class extension. The second scenario is when Class is not found.<br>
* Exception in thread main java.lang.NoSuchMethodError: main: This exception comes when you are trying to run a class that doesn’t have main method.<br>
* Exception in thread “main” java.lang.ArithmeticException: Whenever any exception is thrown from main method, it prints the exception is console. The first part explains that exception is thrown from main method, second part prints the exception class name and then after a colon, it prints the exception message.

<div class="clearfix"></div>
                    </div><div class="first">Ques. : What are Java Custom Exceptions ?<br>
Ans :	User defined Exceptions are called Custom Exceptions. By the help of custom exception, you can have your own exception and message.<br>
    <table><tr><td>class InvalidAgeException extends Exception{  <br>
 InvalidAgeException(String s){  <br>
  super(s);  <br>
 }  <br>
}<br>
class Sample{<br>  
static void validate(int age)throws InvalidAgeException{ <br> 
     if(age<18)  <br>
      throw new InvalidAgeException("not valid");<br>  
     else  <br>
      System.out.println("welcome to vote");<br>  
   }  <br>
     
   public static void main(String args[]){<br>  
      try{  <br>
      validate(13);<br>  
      }catch(Exception m){<br>
System.out.println("Exception occured: "+m);<br>
}  <br>
  
   System.out.println("rest of the code...");<br>  
  }  <br>
}  <br>
Output:Exception occured: InvalidAgeException:not valid<br>
              rest of the code...
</td></tr></table>
<div class="clearfix"></div>   
                  </div><div class="second">Ques. : What are the Rules of Exceptional Handling when performed with method Overriding ?<br>
Ans :	The Rules are as follows: <br>
* If the superclass method does not declare an exception<br>
If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception but it can declare unchecked exception. <br>
* If the superclass method declares an exception<br>
If the superclass method declares an exception, subclass overridden method can declare same, subclass exception or no exception but cannot declare parent exception. <br>
Rule: If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception. <br><br>
    <table><tr><td>import java.io.*;  <br>
class Parent{  <br>
  void msg(){System.out.println("Parent Method");}<br>  
}  <br>
  
class Child extends Parent<br>
{  <br>
  void msg()throws IOException{<br>  
    System.out.println("Child Method");<br>  
  }  <br>
  public static void main(String args[]){ <br> 
   Parent p=new Child();  <br>
   p.msg();  <br>
  }  <br>
}  <br>
Output:Compile Time Error</td></tr></table>
    <br>
Rule: If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception but can declare unchecked exception.<br>
    <table><tr><td>import java.io.*;  <br>
class Parent{ <br>
  void msg(){System.out.println("Parent Method");}<br>  
}  <br>
    
class Child extends Parent<br>
{  
    void msg()throws ArithmeticException{  <br>
                                                    System.out.println("Child Method");  <br>
    }  <br>
    public static void main(String args[]){  <br>
     Parent p=new Child();  <br>
     p.msg();  <br>
                                                    }<br>
} <br>
Output:child<br></td></tr></table><br>
Rule: If the superclass method declares an Exception (E1), subclass overridden method can declare either of Same Exception(E1), SubclassException(Lower Hierarchy than E1) or No Exception but can’t declare any Parent Exception (Up Hierarchichal than E1).
Example.1 :If ArithmeticException is declared in Overriding method of Parent Class than Overridden method of Child class can declareArithmeticException.<br>
Example.2 :If any Exception is declared in Overriding method of Parent Class than Overridden method of Child class may have No Exception as well.
Example.3 :If Exception is declared in Overriding method of Parent Class than Overridden method of Child class may have any of IOException , SQLException , RuntimeException or subclass exception of them as well.<br>
E.g :ArithmeticException is subclass exception of RuntimeException.<br>
Example.4 :If ArithmeticException is declared in Overriding method of Parent Class than Overridden method of Child class can’t declare RuntimeException or Exception.<br>


<div class="clearfix"></div>
                    </div></div>
          </body>
         </html>